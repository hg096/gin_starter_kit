<!-- @format -->

<!-- 메뉴 관리 페이지 템플릿 -->
{{define "title"}}메뉴{{ end }}

{{define "content"}}
<div class="container mx-auto p-4">
	<h1 class="text-2xl font-bold mb-4">메뉴 그룹 관리</h1>

	<div id="menu-group-app" class="mb-8">
		<div class="border rounded p-3 mb-6">
			<h2 class="text-lg font-bold mb-2">메뉴 추가</h2>
			<form @submit.prevent="addItemForNewGroup" class="border rounded p-3 mb-2">
				<div class="flex items-center">
					<input v-model="newGroup.LabelG" type="text" placeholder="그룹명" class="border p-2 rounded w-64 mx-1" />
					<input v-model.number="newGroup.OrderG" type="number" placeholder="순서" class="border p-2 rounded w-32 mx-1" />
				</div>
				<div class="flex ml-4 mt-3">
					<input v-model="newItemForNewGroup.Label" type="text" placeholder="메뉴명" class="border p-1 rounded w-48 mx-1" />
					<input v-model="newItemForNewGroup.Href" type="text" placeholder="주소" class="border p-1 rounded w-64 mx-1" />
					<div class="flex gap-2">
						<label v-for="role in roles" :key="role" class="inline-flex items-center mx-1">
							<input type="checkbox" :value="role" v-model="newItemForNewGroup.Role" class="mr-1" />
							<p v-text="role"></p>
						</label>
					</div>
					<input v-model.number="newItemForNewGroup.Order" type="number" placeholder="순서" class="border p-1 rounded w-16 mx-1" />
					<button type="submit" class="bg-green-600 text-white px-3 rounded mx-1">추가</button>
				</div>
			</form>
		</div>

		<ul>
			<li v-for="group in groups" :key="group.ID" class="border rounded p-3 mb-2">
				<div class="flex justify-between items-center" v-if="group.IsGroup === 'Y'">
					<div>
						<input v-model="group.Label" placeholder="그룹명" class="border p-1 rounded mr-2" />
						<input v-model.number="group.Order" placeholder="순서" class="border p-1 rounded w-16" />
					</div>
					<div>
						<button @click="updateGroup(group)" class="text-blue-500 mr-2">저장</button>
						<button @click="deleteGroup(group.ID)" class="text-red-500">삭제</button>
					</div>
				</div>

				<div class="ml-4 mt-3">
					<form @submit.prevent="addItemForGroup(group)" class="flex gap-2 mb-2" v-if="group.IsGroup === 'Y'">
						<input v-model="group.newItem.Label" type="text" placeholder="메뉴명" class="border p-1 rounded w-48" />
						<input v-model="group.newItem.Href" type="text" placeholder="주소" class="border p-1 rounded w-64" />
						<div class="flex gap-2">
							<label v-for="role in roles" :key="role" class="inline-flex items-center mx-1">
								<input type="checkbox" :value="role" v-model="group.newItem.Role" class="mr-1" />
								<p v-text="role"></p>
							</label>
						</div>

						<input v-model.number="group.newItem.Order" type="number" placeholder="순서" class="border p-1 rounded w-16" />
						<button type="submit" class="bg-green-600 text-white px-3 rounded">추가</button>
					</form>

					<ul>
						<li v-for="item in group.Items" :key="item.ID" class="flex gap-2 items-center mb-1">
							<input v-model="item.Label" class="border p-1 rounded w-48" />
							<input v-model="item.Href" class="border p-1 rounded w-64" />

							<div class="flex gap-2">
								<label v-for="role in roles" :key="role" class="inline-flex items-center mx-1">
									<input type="checkbox" :value="role" v-model="item.Role" class="mr-1" />
									<p v-text="role"></p>
								</label>
							</div>
							<!-- <input v-model="item.Role" class="border p-1 rounded w-48" /> -->
							<input v-model.number="item.Order" class="border p-1 rounded w-16" />
							<button @click="updateItem(item)" class="text-blue-500">저장</button>
							<button @click="deleteItem(item.ID)" class="text-red-500">삭제</button>
						</li>
					</ul>
				</div>
			</li>
		</ul>
	</div>
</div>

<script>
	const { createApp, reactive } = Vue;

	createApp({
		setup() {
			const newItem = reactive({ Label: "", Href: "", Role: "", Order: 0 });

			const newGroup = reactive({ LabelG: "", OrderG: 0 });
			const newItemForNewGroup = reactive({ Label: "", Href: "", Role: [], Order: 0 });
			const groups = reactive([]);
			const roles = reactive(['A','M','AG']);

			const fetchGroups = async () => {
				const res = await fetch("/adm/api/menus");
				const data = await res.json();

				// 각 그룹별로 newItem 속성 추가
				data.data.forEach((g) => {
					if (!g.newItem) {
						g.newItem = { Label: "", Href: "", Role: [], Order: 0 };
					}
					g.Items.forEach((ig) => {
						if (typeof ig.Role === "string") {
							try {
								ig.Role = JSON.parse(ig.Role);
							} catch (e) {
								ig.Role = [];
							}
						}
					});
				});
				groups.splice(0, groups.length, ...data.data);
			};

			const updateGroup = async (group) => {
				await fetch(`/adm/api/menus/group/${group.ID}`, {
					method: "PUT",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify(group)
				});
			};

			const deleteGroup = async (id) => {
				await fetch(`/adm/api/menus/group/${id}`, { method: "DELETE" });
				fetchGroups();
			};

			const addItemForNewGroup = async () => {

        newItemForNewGroup.Role = await JSON.stringify(newItemForNewGroup.Role);

				await fetch(`/adm/api/menus/item`, {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({ ...newItemForNewGroup, ...newGroup, group_id: null })
				});
				// 입력값 초기화
				Object.assign(newItemForNewGroup, { Label: "", Href: "", Role: [], Order: 0 });
				Object.assign(newGroup, { LabelG: "", OrderG: 0 });
				fetchGroups();
			};

			const addItemForGroup = async (group) => {

        group.newItem.Role = await JSON.stringify(group.newItem.Role);

				await fetch(`/adm/api/menus/item`, {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({ ...group.newItem, group_id: group.ID })
				});
				Object.assign(group.newItem, { Label: "", Href: "", Role: [], Order: 0 });
				fetchGroups();
			};

			const updateItem = async (item) => {
				item.Role = await JSON.stringify(item.Role);

				await fetch(`/adm/api/menus/item/${item.ID}`, {
					method: "PUT",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify(item)
				});

				item.Role = JSON.parse(item.Role);
			};

			const deleteItem = async (id) => {

        console.log("deleteItem > ", id)
				await fetch(`/adm/api/menus/item/${id}`, { method: "DELETE" });
				fetchGroups();
			};

			fetchGroups();

			return {
				groups,
				roles,
				newGroup,
				newItem,
				newItemForNewGroup,
				updateGroup,
				deleteGroup,
				addItemForNewGroup,
				addItemForGroup,
				updateItem,
				deleteItem
			};
		}
	}).mount("#menu-group-app");
</script>
{{ end }}
