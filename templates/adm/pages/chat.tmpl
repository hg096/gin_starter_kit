<!-- @format -->

{{define "title"}}실시간 채팅{{ end }}

{{define "content"}}
<div id="chat-app" class="flex h-[80vh] border rounded bg-white overflow-hidden">
	<div class="flex-1 flex flex-col">
		<div class="p-2 bg-gray-100 flex justify-between items-center">
			<span v-if="currentUser" v-text="currentUser.u_name + ' (' + currentUser.u_id + ')'"></span>
			<span v-else class="text-gray-500">대화 상대를 선택하세요</span>
			<button v-if="currentUser" @click="leaveChat" class="text-sm text-red-500">나가기</button>
		</div>
		<div ref="chatBox" class="flex-1 overflow-y-auto p-2 space-y-2 bg-gray-50">
			<div v-for="m in messages" :key="m.time" :class="m.from===myId ? 'text-right' : 'text-left'">
				<span class="inline-block px-2 py-1 rounded bg-blue-100" v-text="m.content"></span>
			</div>
		</div>
		<div class="p-2 flex border-t" v-if="currentUser">
			<input v-model="newMessage" @keyup.enter="sendMessage" class="flex-1 border rounded px-2" placeholder="메시지 입력" />
			<button @click="sendMessage" class="ml-2 px-3 bg-blue-600 text-white rounded">전송</button>
		</div>
	</div>
	<div class="w-60 border-l overflow-y-auto">
		<h3 class="p-2 font-semibold border-b">사용자 목록 {{.MyID}}</h3>
		<div v-for="u in users" :key="u.u_id" @click="selectUser(u)" class="p-2 cursor-pointer hover:bg-gray-100" :class="{'bg-gray-200': currentUser && currentUser.u_id===u.u_id}">
			<p v-text="u.u_name + ' (' + u.u_id + ')'"></p>
		</div>
	</div>
</div>

<script>
	const { createApp, ref, onMounted, nextTick } = Vue;
	createApp({
		setup() {
			const users = ref([]);
			const currentUser = ref(null);
			const messages = ref([]);
			const newMessage = ref("");
			const ws = ref(null);
			const myId = "{{.MyID}}";
			const chatBox = ref(null);

			const currentRoomID = ref(null);

			const fetchUsers = async () => {
				const res = await fetch("/adm/api/users");
				const data = await res.json();
				users.value = data.data.filter((u) => u.u_id !== myId); // 내 계정 제외
				// users.value = data.data;
			};

			// 채팅 내역을 HTTP GET으로 불러와 messages.value에 채워주는 함수
			const fetchHistory = async (roomID) => {
				try {
					const res = await fetch(`/adm/api/chat/history?room=${encodeURIComponent(roomID)}`);
					if (!res.ok) {
						throw new Error("HTTP 코드: " + res.status);
					}
					const json = await res.json();
					// json.data는 ChatMessage 배열
					// 기존 WebSocket 메시지 포맷({from,to,content,time})과 다르므로 적절히 매핑
					messages.value = [];
					if (json.data && json.data.length > 0) {
						json.data.forEach((m) => {
							const msg = {
								from: m.sender_id,
								to: m.receiver_id,
								content: m.content,
								time: new Date(m.timestamp).getTime()
							};
							messages.value.push(msg);
						});
					}

				} catch (error) {
					console.error("fetchHistory 에러:", error);
					throw error;
				}
			};
			const connect = () => {
				if (!currentUser.value) return;

				const newRoomID = [myId, currentUser.value.u_id].sort().join(":");

				if (ws.value && currentRoomID.value === newRoomID && ws.value.readyState === WebSocket.OPEN) {
					// console.log("Already connected to", newRoomID);
					return;
				}

				if (ws.value) {
    				// console.log("[connect] 이전 WebSocket 닫기 ", ws.value);
					ws.value.messages = null;
					ws.value.close();
					ws.value = null;
				}

				const proto = location.protocol === "https:" ? "wss" : "ws";
				ws.value = new WebSocket(`${proto}://${location.host}/ws?user=${myId}&target=${currentUser.value.u_id}`);
				currentRoomID.value = newRoomID;

				ws.value.onmessage = (e) => {
					const msg = JSON.parse(e.data);
					messages.value.push(msg);
					// console.log("Received from server:", msg, "Socket:", ws.value, "Room:", currentRoomID.value);

					nextTick(() => {
						if (chatBox.value) chatBox.value.scrollTop = chatBox.value.scrollHeight;
					});
				};

				ws.value.onopen = () => {
					// console.log("WebSocket opened to", newRoomID);
					// messages.value = []; // 방 전환 시 메시지 초기화
				};
				ws.value.onclose = () => {
					// console.log("WebSocket closed:", currentRoomID.value);
					currentRoomID.value = null;
				};
			};

			const selectUser = (u) => {
				if (currentUser.value && currentUser.value.u_id === u.u_id) return;

				// 기존 연결 닫기
				if (ws.value) {
					ws.value.close();
					ws.value = null;
				}

				currentUser.value = u;
				// connect(); // 강제 한 번만 실행

				// 새로운 roomID
				const newRoomID = [myId, currentUser.value.u_id].sort().join(":");

				// DB에서 채팅 내역 불러오기
				fetchHistory(newRoomID)
					.then(() => {
						// WebSocket 연결
						connect();
					})
					.catch((err) => {
						console.error("채팅 내역 불러오기 실패:", err);
						connect(); // 내역 못불러와도 소켓 연결은 시도
					});
			};

			const sendMessage = () => {
				if (!newMessage.value.trim() || !ws.value || ws.value.readyState !== WebSocket.OPEN) return;

				const msg = {
					from: myId,
					to: currentUser.value.u_id,
					content: newMessage.value.trim(),
					time: Date.now()
				};

				// console.log("Sending:", msg);
				// console.log("ws.value:", ws.value);

				// HTTP POST로 DB에 저장
				fetch("/adm/api/chat/message", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({
						room_id: [myId, currentUser.value.u_id].sort().join(":"),
						sender_id: myId,
						receiver_id: currentUser.value.u_id,
						content: newMessage.value.trim()
					})
				})
					.then((res) => {
						if (!res.ok) {
							throw new Error("DB 저장 실패, HTTP 코드: " + res.status);
						}
						return res.json();
					})
					.then((json) => {
						ws.value.send(JSON.stringify(msg));
						newMessage.value = "";
						// console.log("전송성공:", messages.value);

						nextTick(() => {
							if (chatBox.value) chatBox.value.scrollTop = chatBox.value.scrollHeight;
						});
					})
					.catch((err) => {
						console.error("메시지 DB 저장 중 에러:", err);
						alert("메시지를 저장하지 못했습니다.");
					});
			};

			const leaveChat = () => {
				if (ws.value) ws.value.close();
				ws.value = null;
				currentUser.value = null;
				messages.value = [];
				currentRoomID.value = null;
			};

			onMounted(fetchUsers);

			return { users, currentUser, messages, newMessage, selectUser, sendMessage, leaveChat, chatBox, myId };
		}
	}).mount("#chat-app");
</script>
{{ end }}
