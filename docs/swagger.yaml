basePath: /
definitions:
  admin.AdminStatsResponse:
    properties:
      admin_users:
        type: integer
      normal_users:
        type: integer
      total_blogs:
        type: integer
      total_users:
        type: integer
    type: object
  admin.AdminUpdateUserAuthRequest:
    properties:
      auth_level:
        description: 1-10
        type: integer
      auth_type:
        description: U, A
        type: string
    type: object
  admin.AdminUserListResponse:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/user.User'
        type: array
    type: object
  blog.Blog:
    properties:
      author_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
    type: object
  blog.BlogListResponse:
    properties:
      blogs:
        items:
          $ref: '#/definitions/blog.Blog'
        type: array
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
    type: object
  blog.CreateBlogRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  blog.UpdateBlogRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  response.ErrorInfo:
    properties:
      code:
        type: string
      details:
        additionalProperties: true
        type: object
      message:
        type: string
    type: object
  response.Meta:
    properties:
      page:
        type: integer
      per_page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.ErrorInfo'
      meta:
        $ref: '#/definitions/response.Meta'
      success:
        type: boolean
    type: object
  user.CreateUserRequest:
    properties:
      user_email:
        type: string
      user_id:
        type: string
      user_name:
        type: string
      user_pass:
        type: string
    required:
    - user_email
    - user_id
    - user_name
    - user_pass
    type: object
  user.LoginRequest:
    properties:
      user_id:
        type: string
      user_pass:
        type: string
    required:
    - user_id
    - user_pass
    type: object
  user.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  user.UpdateUserRequest:
    properties:
      user_email:
        type: string
      user_name:
        type: string
      user_pass:
        type: string
    type: object
  user.User:
    properties:
      auth_level:
        type: integer
      auth_type:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  description: 개선된 Gin Starter Kit API 서버
  title: Gin Starter API
  version: "2.0"
paths:
  /api/admin/stats:
    get:
      consumes:
      - application/json
      description: 전체 사용자, 블로그 등의 통계를 조회합니다
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/admin.AdminStatsResponse'
              type: object
      security:
      - BearerAuth: []
      summary: 통계 조회 (관리자)
      tags:
      - admin
  /api/admin/users:
    get:
      consumes:
      - application/json
      description: 모든 사용자 목록을 조회합니다 (관리자 전용)
      parameters:
      - description: '페이지 번호 (기본: 1)'
        in: query
        name: page
        type: integer
      - description: '페이지 크기 (기본: 20)'
        in: query
        name: limit
        type: integer
      - description: 사용자 타입 (U, A)
        in: query
        name: user_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/admin.AdminUserListResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 사용자 목록 조회 (관리자)
      tags:
      - admin
  /api/admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: 사용자를 삭제합니다
      parameters:
      - description: 사용자 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 사용자 삭제 (관리자)
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: 특정 사용자의 상세 정보를 조회합니다
      parameters:
      - description: 사용자 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 사용자 상세 조회 (관리자)
      tags:
      - admin
  /api/admin/users/{id}/auth:
    put:
      consumes:
      - application/json
      description: 사용자의 권한 타입과 레벨을 수정합니다
      parameters:
      - description: 사용자 ID
        in: path
        name: id
        required: true
        type: string
      - description: 권한 정보
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AdminUpdateUserAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 사용자 권한 수정 (관리자)
      tags:
      - admin
  /api/blog:
    get:
      consumes:
      - application/json
      description: 블로그 글 목록을 페이지네이션으로 조회합니다
      parameters:
      - description: '페이지 번호 (기본: 1)'
        in: query
        name: page
        type: integer
      - description: '페이지 크기 (기본: 20, 최대: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/blog.BlogListResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: 블로그 목록
      tags:
      - blog
    post:
      consumes:
      - application/json
      description: 새로운 블로그 글을 작성합니다
      parameters:
      - description: 블로그 생성 정보
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/blog.CreateBlogRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/blog.Blog'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 블로그 생성
      tags:
      - blog
  /api/blog/{id}:
    delete:
      consumes:
      - application/json
      description: 자신의 블로그 글을 삭제합니다
      parameters:
      - description: 블로그 ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 블로그 삭제
      tags:
      - blog
    get:
      consumes:
      - application/json
      description: ID로 블로그 글을 조회합니다
      parameters:
      - description: 블로그 ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/blog.Blog'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: 블로그 조회
      tags:
      - blog
    put:
      consumes:
      - application/json
      description: 자신의 블로그 글을 수정합니다
      parameters:
      - description: 블로그 ID
        in: path
        name: id
        required: true
        type: integer
      - description: 수정할 정보
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/blog.UpdateBlogRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/blog.Blog'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 블로그 수정
      tags:
      - blog
  /api/blog/author/{author_id}:
    get:
      consumes:
      - application/json
      description: 특정 작성자의 블로그 글 목록을 조회합니다
      parameters:
      - description: 작성자 ID
        in: path
        name: author_id
        required: true
        type: string
      - description: '페이지 번호 (기본: 1)'
        in: query
        name: page
        type: integer
      - description: '페이지 크기 (기본: 20, 최대: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/blog.BlogListResponse'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: 작성자별 블로그 목록
      tags:
      - blog
  /api/user/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: 로그인 정보
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: 로그인
      tags:
      - User
  /api/user/logout:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: 로그아웃
      tags:
      - User
  /api/user/profile:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: 프로필 조회
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: 수정 정보
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: 프로필 수정
      tags:
      - User
  /api/user/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: 리프레시 토큰
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: 토큰 갱신
      tags:
      - User
  /api/user/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: 회원가입 정보
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.Response'
      summary: 회원가입
      tags:
      - User
  /api/ws/room/{room_id}:
    get:
      consumes:
      - application/json
      description: 특정 방의 접속자 목록과 정보를 조회합니다
      parameters:
      - description: 방 ID
        in: path
        name: room_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: 방 정보 조회
      tags:
      - websocket
  /api/ws/stats:
    get:
      consumes:
      - application/json
      description: 전체 방 개수와 접속자 수를 조회합니다
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: WebSocket 통계
      tags:
      - websocket
  /ws/chat:
    get:
      description: 실시간 채팅을 위한 WebSocket 연결
      parameters:
      - description: 방 ID
        in: query
        name: room_id
        required: true
        type: string
      responses:
        "101":
          description: Switching Protocols
      security:
      - BearerAuth: []
      summary: 채팅 WebSocket
      tags:
      - websocket
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
